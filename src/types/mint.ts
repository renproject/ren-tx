import {
    BurnAndReleaseTransaction,
    DepositCommon,
    LockAndMintTransaction,
    RenNetwork,
} from "@renproject/interfaces";

export type AllGatewayTransactions<DepositType> =
    | ConfirmingGatewayTransaction<DepositType>
    | AcceptedGatewayTransaction<DepositType>
    | SubmittingGatewayTransaction<DepositType>
    | MintedGatewayTransaction<DepositType>
    | CompletedGatewayTransaction<DepositType>
    | GatewayTransaction<DepositType>;

export const isConfirming = <X>(
    x: AllGatewayTransactions<X>,
): x is ConfirmingGatewayTransaction<X> => {
    return (x as ConfirmingGatewayTransaction<X>).sourceTxConfs !== undefined;
};

export interface ConfirmingGatewayTransaction<DepositType>
    extends GatewayTransaction<DepositType> {
    /**
     * How many confirmations needed to consider the source tx accepted
     */
    sourceTxConfTarget: number;
}

export const isAccepted = <X>(
    x: AllGatewayTransactions<X>,
): x is AcceptedGatewayTransaction<X> => {
    return (x as AcceptedGatewayTransaction<X>).renSignature !== undefined;
};

export interface AcceptedGatewayTransaction<DepositType>
    extends ConfirmingGatewayTransaction<DepositType> {
    /**
     * Response to renvm signing request
     */
    renResponse: LockAndMintTransaction | BurnAndReleaseTransaction;
    /**
     * Signature generated by renvm
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    renSignature: any;
}

export const isSubmitted = <X>(
    x: AllGatewayTransactions<X>,
): x is SubmittingGatewayTransaction<X> => {
    return (x as SubmittingGatewayTransaction<X>).contractParams !== undefined;
};

export interface SubmittingGatewayTransaction<DepositType, CustomParams = {}>
    extends AcceptedGatewayTransaction<DepositType> {
    /**
     * Additional parameters for constructing a custom transaction
     * Provided at the point of submission
     */
    contractParams: CustomParams;
}

export const isMinted = <X>(
    x: AllGatewayTransactions<X>,
): x is MintedGatewayTransaction<X> => {
    return (x as MintedGatewayTransaction<X>).destTxHash !== undefined;
};

export interface MintedGatewayTransaction<DepositType>
    extends SubmittingGatewayTransaction<DepositType> {
    /* Hash of output transaction */
    destTxHash: string;
    /**
     * Underlying dest chain tx
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rawDestTx: any;

    /**
     * Transaction amount in the minimum denomination (eg. SATs for Bitcoin)
     */
    destTxAmount: string;
}

export const isCompleted = <X>(
    x: AllGatewayTransactions<X>,
): x is CompletedGatewayTransaction<X> => {
    return (x as CompletedGatewayTransaction<X>).completedAt !== undefined;
};

export interface CompletedGatewayTransaction<DepositType>
    extends MintedGatewayTransaction<DepositType> {
    /**
     * Unix time when mint was successful
     */
    completedAt: Number;
}

/**
 * A pair of transactions from a sourceChain to a destChain
 */
export interface GatewayTransaction<DepositType> {
    /* Hash of renVM transaction */
    renVMHash: string;
    /**
     * Transaction amount in the minimum denomination (eg. SATs for Bitcoin)
     */
    sourceTxAmount: string;
    /**
     * The RenVM Tx hash when minting,
     * The host chain burn tx hash when burning
     */
    sourceTxHash: string;
    /**
     * Current confirmations on source transaction
     */
    sourceTxConfs: number;
    /**
     * Underlying source chain tx
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rawSourceTx: DepositCommon<DepositType>;

    /**
     * Latest error detected during processing a specific transaction
     */
    error?: Error;

    /**
     * Unix time when deposit was first detected
     */
    detectedAt: Number;
}

/**
 * A Gateway Session represents the parameters used to create a Gateway Address
 * that can recieve assets to mint on RenVM; or construct the parameters required
 * for burning and releasing from RenVM
 */
export interface GatewaySession<DepositType, CustomParams = {}> {
    /**
     * A unique ID to identify the session
     */
    id: string;
    /**
     * Ren network version to be used, which determines network versions for the selected chains
     */
    network: RenNetwork | "testnet" | "mainnet";
    /**
     * Asset to be minted (on native chain)
     */
    sourceAsset: string;
    /**
     * Chain that the source asset is located on
     */
    sourceChain: string;
    /**
     * Address that will recieve the asset
     */
    destAddress: string;
    /**
     * Chain that the asset will be recieved on
     */
    destChain: string;
    /**
     * Address that can cryptographically be proven to belong to a user
     */
    userAddress: string;

    /**
     * Random 32 bytes to make the gateway address reproducable
     */
    nonce?: string | Buffer;

    /**
     * Unix time when gateway address will no longer accept deposits
     */
    expiryTime: number;
    /**
     * Transactions detected for this session, indexed by their sourceTxHash
     */
    transactions: { [key: string]: AllGatewayTransactions<DepositType> };

    /**
     * Extra parameters to be used for constructing to/from contract parameters
     */
    customParams: CustomParams;

    /**
     * Optional timestamp
     */
    createdAt?: number;

    /**
     * Optional timestamp
     */
    updatedAt?: number;
}

export const isErroring = <X>(
    x: OpenedGatewaySession<X> | ErroringGatewaySession<X> | GatewaySession<X>,
): x is ErroringGatewaySession<X> => {
    return (x as ErroringGatewaySession<X>).error !== undefined;
};

export interface ErroringGatewaySession<DepositType, CustomParams = {}>
    extends GatewaySession<DepositType, CustomParams> {
    /**
     * Latest error detected during processing
     */
    error: Error;
}

export const isOpen = <X>(
    x: OpenedGatewaySession<X> | GatewaySession<X>,
): x is OpenedGatewaySession<X> => {
    return (x as OpenedGatewaySession<X>).gatewayAddress !== undefined;
};

export interface OpenedGatewaySession<DepositType, CustomParams = {}>
    extends GatewaySession<DepositType, CustomParams> {
    /**
     * Generated address on the source chain where assets should be sent to for a mint transaction
     */
    gatewayAddress: string;
}
